<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use App\Models\Company;
use App\Models\Appointment;
use App\Services\TelegramBotService;
use Carbon\Carbon;

class TelegramWebhookController extends Controller
{
    protected $botService;

    public function __construct(TelegramBotService $botService)
    {
        $this->botService = $botService;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram
     */
    public function handle(Request $request, $botToken)
    {
        try {
            // –ù–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –ø–æ —Ç–æ–∫–µ–Ω—É –±–æ—Ç–∞
            $company = Company::where('telegram_bot_token', $botToken)->first();
            
            if (!$company) {
                Log::warning('–ü–æ–ª—É—á–µ–Ω webhook –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞', ['token' => $botToken]);
                return response('OK', 200);
            }

            $update = $request->all();
            Log::info('–ü–æ–ª—É—á–µ–Ω Telegram webhook', [
                'company_id' => $company->id,
                'update' => $update
            ]);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫)
            if (isset($update['callback_query'])) {
                $this->handleCallbackQuery($company, $update['callback_query']);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (isset($update['message'])) {
                $this->handleMessage($company, $update['message']);
            }

            return response('OK', 200);
            
        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return response('Error', 500);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫)
     */
    private function handleCallbackQuery($company, $callbackQuery)
    {
        $chatId = $callbackQuery['from']['id'];
        $messageId = $callbackQuery['message']['message_id'];
        $data = $callbackQuery['data'];

        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
        $parts = explode(':', $data);
        $action = $parts[0];

        switch ($action) {
            case 'quick_book':
                $this->showDateSelection($company, $chatId, $messageId);
                break;
                
            case 'my_appointments':
                $this->showUserAppointments($company, $chatId, $messageId);
                break;
                
            case 'work_schedule':
                $this->showWorkSchedule($company, $chatId, $messageId);
                break;
                
            case 'show_services':
                $this->showAllServices($company, $chatId, $messageId);
                break;
                
            case 'show_contacts':
                $this->showCompanyContacts($company, $chatId, $messageId);
                break;
                
            case 'show_help':
                $this->showHelpInline($company, $chatId, $messageId);
                break;
                
            case 'back_to_main':
                $this->showWelcomeMessage($company, $chatId);
                break;
                
            case 'select_date_back':
                $this->showDateSelection($company, $chatId, $messageId);
                break;
                
            case 'select_date':
                $date = $parts[1];
                $this->showTimeSlots($company, $chatId, $messageId, $date);
                break;
                
            case 'select_time':
                $date = $parts[1];
                $time = $parts[2];
                $this->showServiceSelection($company, $chatId, $messageId, $date, $time);
                break;
                
            case 'select_service':
                $date = $parts[1];
                $time = $parts[2];
                $serviceId = $parts[3];
                $this->showContactForm($company, $chatId, $messageId, $date, $time, $serviceId);
                break;
                
            case 'confirm_booking':
                $this->processBooking($company, $callbackQuery);
                break;
                
            case 'cancel_booking':
                $this->cancelBooking($company, $chatId, $messageId);
                break;
                
            case 'cancel_appointment':
                $appointmentId = $parts[1];
                $this->showCancelConfirmation($company, $chatId, $messageId, $appointmentId);
                break;
                
            case 'confirm_cancel':
                $appointmentId = $parts[1];
                $this->cancelUserAppointment($company, $chatId, $messageId, $appointmentId);
                break;
                
            case 'reschedule_appointment':
                $appointmentId = $parts[1];
                $this->showRescheduleDateSelection($company, $chatId, $messageId, $appointmentId);
                break;
                
            case 'reschedule_select_date':
                $appointmentId = $parts[1];
                $newDate = $parts[2];
                $this->showRescheduleTimeSlots($company, $chatId, $messageId, $appointmentId, $newDate);
                break;
                
            case 'reschedule_select_time':
                $appointmentId = $parts[1];
                $newDate = $parts[2];
                $newTime = $parts[3];
                $this->confirmReschedule($company, $chatId, $messageId, $appointmentId, $newDate, $newTime);
                break;
                
            case 'confirm_reschedule':
                $appointmentId = $parts[1];
                $newDate = $parts[2];
                $newTime = $parts[3];
                $this->processReschedule($company, $chatId, $messageId, $appointmentId, $newDate, $newTime);
                break;
                
            case 'leave_review':
                $this->showReviewForm($company, $chatId, $messageId);
                break;
                
            case 'notifications':
                $this->showNotificationSettings($company, $chatId, $messageId);
                break;
                
            case 'toggle_notifications':
                $this->toggleNotifications($company, $chatId, $messageId);
                break;
        }

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        $this->botService->answerCallbackQuery($company, $callbackQuery['id']);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private function handleMessage($company, $message)
    {
        $chatId = $message['from']['id'];
        $text = $message['text'] ?? '';
        
        Log::info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', [
            'company_id' => $company->id,
            'chat_id' => $chatId,
            'text' => $text
        ]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if (cache()->get("waiting_phone_{$chatId}")) {
            $this->handlePhoneInput($company, $chatId, $text);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –æ—Ç–∑—ã–≤–∞
        if (cache()->get("waiting_review_{$chatId}")) {
            $this->handleReviewInput($company, $chatId, $text);
            return;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if ($text === '/start' || $text === '/book') {
            $this->showWelcomeMessage($company, $chatId);
        } elseif ($text === '/help') {
            $this->showHelpMessage($company, $chatId);
        } elseif ($text === '/cancel') {
            $this->showCancelOptions($company, $chatId);
        } elseif ($text === '/appointments' || $text === '/my') {
            // –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
            $this->showMyAppointmentsQuick($company, $chatId);
        } elseif ($text === '/services') {
            // –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ª—É–≥
            $this->showServicesQuick($company, $chatId);
        } elseif ($text === '/contacts') {
            // –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            $this->showContactsQuick($company, $chatId);
        } elseif ($text === '/schedule') {
            // –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            $this->showScheduleQuick($company, $chatId);
        }
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        elseif ($text === 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è') {
            $this->handleKeyboardBooking($company, $chatId);
        } elseif ($text === 'üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏') {
            $this->handleKeyboardMyAppointments($company, $chatId);
        } elseif ($text === 'üíº –£—Å–ª—É–≥–∏') {
            $this->handleKeyboardServices($company, $chatId);
        } elseif ($text === 'üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã') {
            $this->handleKeyboardSchedule($company, $chatId);
        } elseif ($text === 'üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã') {
            $this->handleKeyboardContacts($company, $chatId);
        } elseif ($text === '‚ùì –ü–æ–º–æ—â—å') {
            $this->handleKeyboardHelp($company, $chatId);
        } elseif ($text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å') {
            $this->handleKeyboardCancelBooking($company, $chatId);
        } elseif ($text === 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
            $this->showWelcomeMessage($company, $chatId);
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            $this->handleContactInput($company, $chatId, $text);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    private function handlePhoneInput($company, $chatId, $text)
    {
        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if (preg_match('/\+?\d[\d\s\(\)\-]{8,}/', $text)) {
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
            $phone = preg_replace('/[^\d+]/', '', $text);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cache()->put("user_phone_{$chatId}", $phone, 86400); // 24 —á–∞—Å–∞
            cache()->forget("waiting_phone_{$chatId}");
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $this->showUserAppointmentsByPhone($company, $chatId, $phone);
        } else {
            $this->botService->sendMessage($company, $chatId, 
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7 (XXX) XXX-XX-XX");
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    private function showUserAppointmentsByPhone($company, $chatId, $phone)
    {
        $appointments = $company->appointments()
            ->where('client_phone', $phone)
            ->where('appointment_date', '>=', now()->format('Y-m-d'))
            ->orderBy('appointment_date')
            ->orderBy('appointment_time')
            ->get();
            
        $message = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n";
        
        if ($appointments->count() > 0) {
            foreach ($appointments as $appointment) {
                $status = $this->getStatusEmoji($appointment->status);
                $message .= "{$status} {$appointment->formatted_date} –≤ {$appointment->formatted_time}\n";
                $message .= "üíº {$appointment->service->name}\n";
                $message .= "üë§ {$appointment->client_name}\n\n";
            }
            
            $keyboard = [];
            foreach ($appointments as $appointment) {
                if ($appointment->status === 'pending' || $appointment->status === 'confirmed') {
                    $keyboard[] = [
                        ['text' => "üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å –Ω–∞ {$appointment->formatted_date}", 
                         'callback_data' => "reschedule_appointment:{$appointment->id}"],
                        ['text' => "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {$appointment->formatted_date}", 
                         'callback_data' => "cancel_appointment:{$appointment->id}"]
                    ];
                }
            }
            $keyboard[] = [
                ['text' => 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â—ë', 'callback_data' => 'quick_book'],
                ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
            ];
        } else {
            $message .= "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n\n";
            $keyboard = [
                [
                    ['text' => 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 'callback_data' => 'quick_book']
                ],
                [
                    ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
                ]
            ];
        }
        
        $this->botService->sendMessage($company, $chatId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
     */
    private function showWelcomeMessage($company, $chatId)
    {
        $message = "üè¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {$company->name}!\n\n";
        $message .= "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:";

        // Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        $inlineKeyboard = [
            [
                ['text' => 'ÔøΩ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å', 'callback_data' => 'quick_book']
            ],
            [
                ['text' => 'ÔøΩ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', 'callback_data' => 'leave_review'],
                ['text' => 'ÔøΩ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'callback_data' => 'notifications']
            ]
        ];

        // –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        $mainKeyboard = $this->botService->createMainKeyboard();
        
        $this->botService->sendMessage($company, $chatId, $message, [
            'reply_markup' => json_encode($mainKeyboard),
            // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º inline –∫–Ω–æ–ø–∫–∏
            'parse_mode' => 'HTML'
        ]);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
        $extraMessage = "üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:";
        $this->botService->sendMessage($company, $chatId, $extraMessage, [
            'reply_markup' => json_encode(['inline_keyboard' => $inlineKeyboard])
        ]);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
     */
    private function showDateSelection($company, $chatId, $messageId)
    {
        $message = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:";
        $keyboard = $this->botService->createDateKeyboard($company);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        $keyboard[] = [
            ['text' => '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
        ];
        
        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private function showUserAppointments($company, $chatId, $messageId)
    {
        // –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ chat_id (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ telegram_chat_id –≤ —Ç–∞–±–ª–∏—Ü—É appointments)
        // –ü–æ–∫–∞ –ø–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        $message = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n";
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –∫—ç—à –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        $userPhone = cache()->get("user_phone_{$chatId}");
        
        if ($userPhone) {
            $appointments = $company->appointments()
                ->where('client_phone', $userPhone)
                ->where('appointment_date', '>=', now()->format('Y-m-d'))
                ->orderBy('appointment_date')
                ->orderBy('appointment_time')
                ->get();
                
            if ($appointments->count() > 0) {
                foreach ($appointments as $appointment) {
                    $status = $this->getStatusEmoji($appointment->status);
                    $message .= "{$status} {$appointment->formatted_date} –≤ {$appointment->formatted_time}\n";
                    $message .= "üíº {$appointment->service->name}\n";
                    $message .= "üìû {$appointment->client_phone}\n\n";
                }
                
                $keyboard = [];
                foreach ($appointments as $appointment) {
                    if ($appointment->status === 'pending' || $appointment->status === 'confirmed') {
                        $keyboard[] = [
                            ['text' => "üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å –Ω–∞ {$appointment->formatted_date}", 
                             'callback_data' => "reschedule_appointment:{$appointment->id}"],
                            ['text' => "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {$appointment->formatted_date}", 
                             'callback_data' => "cancel_appointment:{$appointment->id}"]
                        ];
                    }
                }
                $keyboard[] = [
                    ['text' => '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
                ];
            } else {
                $message .= "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n\n";
                $keyboard = [
                    [
                        ['text' => 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 'callback_data' => 'quick_book']
                    ],
                    [
                        ['text' => '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
                    ]
                ];
            }
        } else {
            $message .= "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n";
            $message .= "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7 (XXX) XXX-XX-XX";
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            cache()->put("waiting_phone_{$chatId}", true, 600);
            
            $keyboard = [
                [
                    ['text' => '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
                ]
            ];
        }
        
        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
     */
    private function showWorkSchedule($company, $chatId, $messageId)
    {
        $settings = $company->getCalendarSettings();
        
        $message = "üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã {$company->name}:\n\n";
        
        $daysRu = [
            'monday' => '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            'tuesday' => '–í—Ç–æ—Ä–Ω–∏–∫', 
            'wednesday' => '–°—Ä–µ–¥–∞',
            'thursday' => '–ß–µ—Ç–≤–µ—Ä–≥',
            'friday' => '–ü—è—Ç–Ω–∏—Ü–∞',
            'saturday' => '–°—É–±–±–æ—Ç–∞',
            'sunday' => '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        ];
        
        foreach ($daysRu as $day => $dayRu) {
            if (in_array($day, $settings['work_days'])) {
                $message .= "‚úÖ {$dayRu}: {$settings['work_start_time']} - {$settings['work_end_time']}\n";
            } else {
                $message .= "‚ùå {$dayRu}: –í—ã—Ö–æ–¥–Ω–æ–π\n";
            }
        }
        
        if (!empty($settings['break_times'])) {
            $message .= "\nüçΩ –ü–µ—Ä–µ—Ä—ã–≤—ã:\n";
            foreach ($settings['break_times'] as $break) {
                $message .= "‚Ä¢ {$break['start']} - {$break['end']}\n";
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        $upcomingExceptions = $company->dateExceptions()
            ->where('exception_date', '>=', now()->format('Y-m-d'))
            ->orderBy('exception_date')
            ->limit(5)
            ->get();
            
        if ($upcomingExceptions->count() > 0) {
            $message .= "\nüìÖ –û—Å–æ–±—ã–µ –¥–Ω–∏:\n";
            foreach ($upcomingExceptions as $exception) {
                $date = $exception->exception_date->format('d.m.Y');
                if ($exception->isAllowException()) {
                    $workTime = $exception->getWorkTimeRange();
                    $message .= "‚úÖ {$date}: –†–∞–±–æ—Ç–∞–µ–º {$workTime['start']} - {$workTime['end']}";
                    if ($exception->reason) {
                        $message .= " ({$exception->reason})";
                    }
                    $message .= "\n";
                } else {
                    $message .= "‚ùå {$date}: –ù–µ —Ä–∞–±–æ—Ç–∞–µ–º";
                    if ($exception->reason) {
                        $message .= " ({$exception->reason})";
                    }
                    $message .= "\n";
                }
            }
        }
        
        $message .= "\nüí° –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø–∏—Å–∏: {$settings['appointment_interval']} –º–∏–Ω—É—Ç";
        $message .= "\nüìÜ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –Ω–∞ {$settings['appointment_days_ahead']} –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥";
        
        $keyboard = [
            [
                ['text' => 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 'callback_data' => 'quick_book']
            ],
            [
                ['text' => '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
            ]
        ];
        
        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —É—Å–ª—É–≥–∏ –∫–æ–º–ø–∞–Ω–∏–∏
     */
    private function showAllServices($company, $chatId, $messageId)
    {
        $services = $company->services()->where('is_active', true)->get();
        
        $message = "üíº –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n\n";
        
        foreach ($services as $service) {
            $message .= "‚Ä¢ {$service->name}\n";
            if ($service->description) {
                $message .= "  {$service->description}\n";
            }
            $message .= "  üí∞ {$service->formatted_price}\n";
            $message .= "  ‚è± {$service->duration_minutes} –º–∏–Ω\n\n";
        }
        
        $keyboard = [
            [
                ['text' => 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 'callback_data' => 'quick_book']
            ],
            [
                ['text' => '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
            ]
        ];
        
        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏
     */
    private function showCompanyContacts($company, $chatId, $messageId)
    {
        $message = "üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã {$company->name}:\n\n";
        
        if ($company->phone) {
            $message .= "üìû –¢–µ–ª–µ—Ñ–æ–Ω: {$company->phone}\n";
        }
        if ($company->email) {
            $message .= "üìß Email: {$company->email}\n";
        }
        if ($company->address) {
            $message .= "üìç –ê–¥—Ä–µ—Å: {$company->address}\n";
        }
        if ($company->website) {
            $message .= "üåê –°–∞–π—Ç: {$company->website}\n";
        }
        
        $keyboard = [
            [
                ['text' => 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 'callback_data' => 'quick_book']
            ],
            [
                ['text' => '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
            ]
        ];
        
        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏
     */
    private function showHelpInline($company, $chatId, $messageId)
    {
        $message = "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É {$company->name}\n\n";
        $message .= "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n";
        $message .= "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º - –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n";
        $message .= "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–µ–π\n";
        $message .= "üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã - —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏\n";
        $message .= "üíº –ù–∞—à–∏ —É—Å–ª—É–≥–∏ - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥\n";
        $message .= "üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã - –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n";
        $message .= "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n";
        $message .= "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n";
        $message .= "/book - –ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å\n";
        $message .= "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n";
        $message .= "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é";
        
        $keyboard = [
            [
                ['text' => 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 'callback_data' => 'quick_book']
            ],
            [
                ['text' => '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
            ]
        ];
        
        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
     */
    private function showCancelConfirmation($company, $chatId, $messageId, $appointmentId)
    {
        $appointment = $company->appointments()->find($appointmentId);
        
        if (!$appointment) {
            $this->botService->editMessage($company, $chatId, $messageId, 
                "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }
        
        $message = "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?\n\n";
        $message .= "üìÖ –î–∞—Ç–∞: {$appointment->formatted_date}\n";
        $message .= "üïê –í—Ä–µ–º—è: {$appointment->formatted_time}\n";
        $message .= "üíº –£—Å–ª—É–≥–∞: {$appointment->service->name}";
        
        $keyboard = [
            [
                ['text' => '‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', 'callback_data' => "confirm_cancel:{$appointmentId}"],
                ['text' => '‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å', 'callback_data' => 'my_appointments']
            ],
            [
                ['text' => '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
            ]
        ];
        
        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private function cancelUserAppointment($company, $chatId, $messageId, $appointmentId)
    {
        $appointment = $company->appointments()->find($appointmentId);
        
        if (!$appointment) {
            $this->botService->editMessage($company, $chatId, $messageId, 
                "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }
        
        $appointment->update(['status' => 'cancelled']);
        
        $message = "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!\n\n";
        $message .= "üìÖ –û—Ç–º–µ–Ω—ë–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å:\n";
        $message .= "–î–∞—Ç–∞: {$appointment->formatted_date}\n";
        $message .= "–í—Ä–µ–º—è: {$appointment->formatted_time}\n";
        $message .= "–£—Å–ª—É–≥–∞: {$appointment->service->name}";
        
        $keyboard = [
            [
                ['text' => 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞', 'callback_data' => 'quick_book']
            ],
            [
                ['text' => '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
            ]
        ];
        
        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if ($company->telegram_notifications_enabled && $company->telegram_chat_id) {
            $ownerMessage = "‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç!\n\n";
            $ownerMessage .= "üë§ –ö–ª–∏–µ–Ω—Ç: {$appointment->client_name}\n";
            $ownerMessage .= "üìû –¢–µ–ª–µ—Ñ–æ–Ω: {$appointment->client_phone}\n";
            $ownerMessage .= "üìÖ –î–∞—Ç–∞: {$appointment->formatted_date}\n";
            $ownerMessage .= "üïê –í—Ä–µ–º—è: {$appointment->formatted_time}\n";
            $ownerMessage .= "üíº –£—Å–ª—É–≥–∞: {$appointment->service->name}";

            $this->botService->sendMessage($company, $company->telegram_chat_id, $ownerMessage);
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏
     */
    private function getStatusEmoji($status)
    {
        return match($status) {
            'pending' => '‚è≥',
            'confirmed' => '‚úÖ',
            'completed' => 'üèÅ',
            'cancelled' => '‚ùå',
            'no_show' => 'üëª',
            default => '‚ùì'
        };
    }
    private function showTimeSlots($company, $chatId, $messageId, $date)
    {
        $slots = $this->botService->getAvailableTimeSlots($company, $date);
        
        if (empty($slots)) {
            $message = "‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É ({$date}) –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:";
            $keyboard = $this->botService->createDateKeyboard($company);
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
            $keyboard[] = [
                ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
            ];
        } else {
            $message = "üïê –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ {$date}:";
            $keyboard = $this->botService->createTimeKeyboard($date, $slots);
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            $keyboard[] = [
                ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
            ];
        }

        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏
     */
    private function showServiceSelection($company, $chatId, $messageId, $date, $time)
    {
        $services = $company->services()->where('is_active', true)->get();
        
        $message = "üíº –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –Ω–∞ {$date} –≤ {$time}:";
        $keyboard = $this->botService->createServiceKeyboard($date, $time, $services);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        $keyboard[] = [
            ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
        ];

        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
     */
    private function showContactForm($company, $chatId, $messageId, $date, $time, $serviceId)
    {
        $service = $company->services()->find($serviceId);
        
        $message = "‚úçÔ∏è –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n";
        $message .= "üìÖ –î–∞—Ç–∞: {$date}\n";
        $message .= "üïê –í—Ä–µ–º—è: {$time}\n";
        $message .= "üíº –£—Å–ª—É–≥–∞: {$service->name}\n";
        $message .= "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {$service->formatted_price}\n\n";
        $message .= "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n";
        $message .= "–ò–º—è –§–∞–º–∏–ª–∏—è\n+7 (XXX) XXX-XX-XX\nemail@example.com (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)";

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        $normalizedTime = strlen($time) <= 2 ? $time . ':00' : $time;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –ë–î)
        cache()->put("booking_data_{$chatId}", [
            'date' => $date,
            'time' => $normalizedTime,
            'service_id' => $serviceId,
            'step' => 'waiting_contact'
        ], 1800); // 30 –º–∏–Ω—É—Ç

        $this->botService->editMessage($company, $chatId, $messageId, $message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private function handleContactInput($company, $chatId, $text)
    {
        $bookingData = cache()->get("booking_data_{$chatId}");
        
        if (!$bookingData || $bookingData['step'] !== 'waiting_contact') {
            return;
        }

        // –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        $lines = explode("\n", trim($text));
        $name = $lines[0] ?? '';
        $phone = $lines[1] ?? '';
        $email = $lines[2] ?? '';

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (empty($name) || empty($phone)) {
            $this->botService->sendMessage($company, $chatId, 
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.");
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        $bookingData['name'] = $name;
        $bookingData['phone'] = $phone;
        $bookingData['email'] = $email;
        $bookingData['step'] = 'confirm';
        
        cache()->put("booking_data_{$chatId}", $bookingData, 1800);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        $this->showBookingConfirmation($company, $chatId, $bookingData);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
     */
    private function showBookingConfirmation($company, $chatId, $bookingData)
    {
        $service = $company->services()->find($bookingData['service_id']);
        
        $message = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n";
        $message .= "üë§ –ö–ª–∏–µ–Ω—Ç: {$bookingData['name']}\n";
        $message .= "üìû –¢–µ–ª–µ—Ñ–æ–Ω: {$bookingData['phone']}\n";
        if (!empty($bookingData['email'])) {
            $message .= "üìß Email: {$bookingData['email']}\n";
        }
        $message .= "üìÖ –î–∞—Ç–∞: {$bookingData['date']}\n";
        $message .= "üïê –í—Ä–µ–º—è: {$bookingData['time']}\n";
        $message .= "üíº –£—Å–ª—É–≥–∞: {$service->name}\n";
        $message .= "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {$service->formatted_price}";

        $keyboard = [
            [
                ['text' => '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'callback_data' => 'confirm_booking'],
                ['text' => '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'callback_data' => 'cancel_booking']
            ],
            [
                ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
            ]
        ];

        $this->botService->sendMessage($company, $chatId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
     */
    private function processBooking($company, $callbackQuery)
    {
        $chatId = $callbackQuery['from']['id'];
        $bookingData = cache()->get("booking_data_{$chatId}");
        
        if (!$bookingData) {
            $this->botService->sendMessage($company, $chatId, 
                "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start");
            return;
        }

        try {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞
            $selectedDate = Carbon::parse($bookingData['date']);
            $service = $company->services()->find($bookingData['service_id']);
            
            if (!$service) {
                $this->botService->editMessage($company, $chatId, $callbackQuery['message']['message_id'], 
                    "‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start");
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—á–∞—è (—Å —É—á–µ—Ç–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
            if (!$company->isWorkDay($selectedDate)) {
                $this->botService->editMessage($company, $chatId, $callbackQuery['message']['message_id'], 
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.");
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            $availableSlots = $this->botService->getAvailableTimeSlots($company, $bookingData['date']);
            $timeAvailable = collect($availableSlots)->contains('time', $bookingData['time']);
            
            if (!$timeAvailable) {
                $this->botService->editMessage($company, $chatId, $callbackQuery['message']['message_id'], 
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–∞—Ç—É.");
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            $appointment = Appointment::create([
                'company_id' => $company->id,
                'service_id' => $bookingData['service_id'],
                'client_name' => $bookingData['name'],
                'client_phone' => $bookingData['phone'],
                'client_email' => $bookingData['email'],
                'appointment_date' => $bookingData['date'],
                'appointment_time' => $bookingData['time'],
                'duration_minutes' => $service->duration_minutes,
                'status' => 'pending',
                'notes' => '–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç'
            ]);

            // –û—á–∏—â–∞–µ–º –∫—ç—à
            cache()->forget("booking_data_{$chatId}");

            $message = "üéâ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n";
            $message .= "üìã –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: #{$appointment->id}\n";
            $message .= "üìÖ –î–∞—Ç–∞: {$appointment->formatted_date}\n";
            $message .= "üïê –í—Ä–µ–º—è: {$appointment->formatted_time}\n";
            $message .= "üíº –£—Å–ª—É–≥–∞: {$service->name}\n";
            $message .= "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {$service->formatted_price}\n\n";
            $message .= "üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n";
            $message .= "–î–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start";

            $this->botService->editMessage($company, $chatId, $callbackQuery['message']['message_id'], $message);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
            if ($company->telegram_notifications_enabled && $company->telegram_chat_id) {
                $ownerMessage = "üîî –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç!\n\n";
                $ownerMessage .= "üë§ –ö–ª–∏–µ–Ω—Ç: {$appointment->client_name}\n";
                $ownerMessage .= "üìû –¢–µ–ª–µ—Ñ–æ–Ω: {$appointment->client_phone}\n";
                if ($appointment->client_email) {
                    $ownerMessage .= "üìß Email: {$appointment->client_email}\n";
                }
                $ownerMessage .= "üìÖ –î–∞—Ç–∞: {$appointment->formatted_date}\n";
                $ownerMessage .= "üïê –í—Ä–µ–º—è: {$appointment->formatted_time}\n";
                $ownerMessage .= "üíº –£—Å–ª—É–≥–∞: {$appointment->service->name}\n";
                $ownerMessage .= "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {$service->formatted_price}";

                $this->botService->sendMessage($company, $company->telegram_chat_id, $ownerMessage);
            }

        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Telegram', [
                'error' => $e->getMessage(),
                'booking_data' => $bookingData,
                'company_id' => $company->id
            ]);

            $this->botService->editMessage($company, $chatId, $callbackQuery['message']['message_id'], 
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.");
        }
    }

    /**
     * –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏
     */
    private function cancelBooking($company, $chatId, $messageId)
    {
        cache()->forget("booking_data_{$chatId}");
        
        $message = "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.";
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        $mainKeyboard = $this->botService->createMainKeyboard();
        
        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode($mainKeyboard)
        ]);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
     */
    private function showHelpMessage($company, $chatId)
    {
        $message = "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É {$company->name}\n\n";
        $message .= "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n";
        $message .= "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏\n";
        $message .= "/book - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º\n";
        $message .= "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n";
        $message .= "üöÄ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n";
        $message .= "/appointments –∏–ª–∏ /my - –ú–æ–∏ –∑–∞–ø–∏—Å–∏\n";
        $message .= "/services - –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥\n";
        $message .= "/contacts - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n";
        $message .= "/schedule - –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã\n";
        $message .= "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n";
        $message .= "üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏!\n\n";
        $message .= "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n";
        if ($company->phone) {
            $message .= "–¢–µ–ª–µ—Ñ–æ–Ω: {$company->phone}\n";
        }
        if ($company->email) {
            $message .= "Email: {$company->email}\n";
        }
        if ($company->address) {
            $message .= "–ê–¥—Ä–µ—Å: {$company->address}\n";
        }

        $this->botService->sendMessage($company, $chatId, $message);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
     */
    private function showCancelOptions($company, $chatId)
    {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç–º–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        $message = "–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\n";
        if ($company->phone) {
            $message .= "üìû –¢–µ–ª–µ—Ñ–æ–Ω: {$company->phone}\n";
        }
        if ($company->email) {
            $message .= "üìß Email: {$company->email}";
        }

        $this->botService->sendMessage($company, $chatId, $message);
    }

    /**
     * –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
     */
    private function showMyAppointmentsQuick($company, $chatId)
    {
        $userPhone = cache()->get("user_phone_{$chatId}");
        
        if ($userPhone) {
            $this->showUserAppointmentsByPhone($company, $chatId, $userPhone);
        } else {
            $message = "üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n";
            $message .= "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7 (XXX) XXX-XX-XX\n\n";
            $message .= "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: /start";
            
            cache()->put("waiting_phone_{$chatId}", true, 600);
            $this->botService->sendMessage($company, $chatId, $message);
        }
    }

    /**
     * –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ª—É–≥
     */
    private function showServicesQuick($company, $chatId)
    {
        $services = $company->services()->where('is_active', true)->get();
        
        $message = "üíº –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n\n";
        
        foreach ($services as $service) {
            $message .= "‚Ä¢ {$service->name}\n";
            if ($service->description) {
                $message .= "  {$service->description}\n";
            }
            $message .= "  üí∞ {$service->formatted_price}\n";
            $message .= "  ‚è± {$service->duration_minutes} –º–∏–Ω\n\n";
        }
        
        $message .= "–î–ª—è –∑–∞–ø–∏—Å–∏: /book";
        
        $this->botService->sendMessage($company, $chatId, $message);
    }

    /**
     * –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
     */
    private function showContactsQuick($company, $chatId)
    {
        $message = "üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã {$company->name}:\n\n";
        
        if ($company->phone) {
            $message .= "üìû –¢–µ–ª–µ—Ñ–æ–Ω: {$company->phone}\n";
        }
        if ($company->email) {
            $message .= "üìß Email: {$company->email}\n";
        }
        if ($company->address) {
            $message .= "üìç –ê–¥—Ä–µ—Å: {$company->address}\n";
        }
        if ($company->website) {
            $message .= "üåê –°–∞–π—Ç: {$company->website}\n";
        }
        
        $message .= "\n–î–ª—è –∑–∞–ø–∏—Å–∏: /book";
        
        $this->botService->sendMessage($company, $chatId, $message);
    }

    /**
     * –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
     */
    private function showScheduleQuick($company, $chatId)
    {
        $settings = $company->getCalendarSettings();
        
        $message = "üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã {$company->name}:\n\n";
        
        $daysRu = [
            'monday' => '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            'tuesday' => '–í—Ç–æ—Ä–Ω–∏–∫', 
            'wednesday' => '–°—Ä–µ–¥–∞',
            'thursday' => '–ß–µ—Ç–≤–µ—Ä–≥',
            'friday' => '–ü—è—Ç–Ω–∏—Ü–∞',
            'saturday' => '–°—É–±–±–æ—Ç–∞',
            'sunday' => '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        ];
        
        foreach ($daysRu as $day => $dayRu) {
            if (in_array($day, $settings['work_days'])) {
                $message .= "‚úÖ {$dayRu}: {$settings['work_start_time']} - {$settings['work_end_time']}\n";
            } else {
                $message .= "‚ùå {$dayRu}: –í—ã—Ö–æ–¥–Ω–æ–π\n";
            }
        }
        
        if (!empty($settings['break_times'])) {
            $message .= "\nüçΩ –ü–µ—Ä–µ—Ä—ã–≤—ã:\n";
            foreach ($settings['break_times'] as $break) {
                $message .= "‚Ä¢ {$break['start']} - {$break['end']}\n";
            }
        }
        
        $message .= "\n–î–ª—è –∑–∞–ø–∏—Å–∏: /book";
        
        $this->botService->sendMessage($company, $chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
     */
    private function handleKeyboardBooking($company, $chatId)
    {
        $message = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:";
        $keyboard = $this->botService->createDateKeyboard($company);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        $keyboard[] = [
            ['text' => '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
        ];
        
        // –ú–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏
        $bookingKeyboard = $this->botService->createBookingKeyboard();
        
        $this->botService->sendMessage($company, $chatId, $message, [
            'reply_markup' => json_encode($bookingKeyboard),
            'parse_mode' => 'HTML'
        ]);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏
        $this->botService->sendMessage($company, $chatId, "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã:", [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏"
     */
    private function handleKeyboardMyAppointments($company, $chatId)
    {
        $userPhone = cache()->get("user_phone_{$chatId}");
        
        if ($userPhone) {
            $this->showUserAppointmentsByPhone($company, $chatId, $userPhone);
        } else {
            $message = "üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n";
            $message .= "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7 (XXX) XXX-XX-XX";
            
            cache()->put("waiting_phone_{$chatId}", true, 600);
            $this->botService->sendMessage($company, $chatId, $message);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üíº –£—Å–ª—É–≥–∏"
     */
    private function handleKeyboardServices($company, $chatId)
    {
        $services = $company->services()->where('is_active', true)->get();
        
        $message = "üíº –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n\n";
        
        foreach ($services as $service) {
            $message .= "‚Ä¢ {$service->name}\n";
            if ($service->description) {
                $message .= "  {$service->description}\n";
            }
            $message .= "  üí∞ {$service->formatted_price}\n";
            $message .= "  ‚è± {$service->duration_minutes} –º–∏–Ω\n\n";
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
        $keyboard = [
            [
                ['text' => 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É', 'callback_data' => 'quick_book']
            ]
        ];
        
        $this->botService->sendMessage($company, $chatId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"
     */
    private function handleKeyboardSchedule($company, $chatId)
    {
        $settings = $company->getCalendarSettings();
        
        $message = "üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã {$company->name}:\n\n";
        
        $daysRu = [
            'monday' => '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            'tuesday' => '–í—Ç–æ—Ä–Ω–∏–∫', 
            'wednesday' => '–°—Ä–µ–¥–∞',
            'thursday' => '–ß–µ—Ç–≤–µ—Ä–≥',
            'friday' => '–ü—è—Ç–Ω–∏—Ü–∞',
            'saturday' => '–°—É–±–±–æ—Ç–∞',
            'sunday' => '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        ];
        
        foreach ($daysRu as $day => $dayRu) {
            if (in_array($day, $settings['work_days'])) {
                $message .= "‚úÖ {$dayRu}: {$settings['work_start_time']} - {$settings['work_end_time']}\n";
            } else {
                $message .= "‚ùå {$dayRu}: –í—ã—Ö–æ–¥–Ω–æ–π\n";
            }
        }
        
        if (!empty($settings['break_times'])) {
            $message .= "\nüçΩ –ü–µ—Ä–µ—Ä—ã–≤—ã:\n";
            foreach ($settings['break_times'] as $break) {
                $message .= "‚Ä¢ {$break['start']} - {$break['end']}\n";
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
        $keyboard = [
            [
                ['text' => 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 'callback_data' => 'quick_book']
            ]
        ];
        
        $this->botService->sendMessage($company, $chatId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã"
     */
    private function handleKeyboardContacts($company, $chatId)
    {
        $message = "üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã {$company->name}:\n\n";
        
        if ($company->phone) {
            $message .= "üìû –¢–µ–ª–µ—Ñ–æ–Ω: {$company->phone}\n";
        }
        if ($company->email) {
            $message .= "üìß Email: {$company->email}\n";
        }
        if ($company->address) {
            $message .= "üìç –ê–¥—Ä–µ—Å: {$company->address}\n";
        }
        if ($company->website) {
            $message .= "üåê –°–∞–π—Ç: {$company->website}\n";
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        $keyboard = [
            [
                ['text' => 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 'callback_data' => 'quick_book'],
                ['text' => 'üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', 'callback_data' => 'work_schedule']
            ]
        ];
        
        $this->botService->sendMessage($company, $chatId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "‚ùì –ü–æ–º–æ—â—å"
     */
    private function handleKeyboardHelp($company, $chatId)
    {
        $message = "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É {$company->name}\n\n";
        $message .= "üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞:\n\n";
        $message .= "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è - –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n";
        $message .= "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–µ–π\n";
        $message .= "üíº –£—Å–ª—É–≥–∏ - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥\n";
        $message .= "üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã - —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã\n";
        $message .= "üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã - –Ω–∞—à–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n";
        $message .= "‚ùì –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n";
        $message .= "üìù –ö–æ–º–∞–Ω–¥—ã:\n";
        $message .= "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n";
        $message .= "/book - –ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å\n";
        $message .= "/appointments - –ú–æ–∏ –∑–∞–ø–∏—Å–∏\n";
        $message .= "/help - –°–ø—Ä–∞–≤–∫–∞\n\n";
        $message .= "üí° –°–æ–≤–µ—Ç: –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!";
        
        $this->botService->sendMessage($company, $chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"
     */
    private function handleKeyboardCancelBooking($company, $chatId)
    {
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        cache()->forget("booking_data_{$chatId}");
        cache()->forget("waiting_phone_{$chatId}");
        
        $message = "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω.\n\n–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.";
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        $mainKeyboard = $this->botService->createMainKeyboard();
        
        $this->botService->sendMessage($company, $chatId, $message, [
            'reply_markup' => json_encode($mainKeyboard)
        ]);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
     */
    private function showReviewForm($company, $chatId, $messageId)
    {
        $message = "‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ {$company->name}\n\n";
        $message .= "–ú—ã –±—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n";
        $message .= "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.";
        
        cache()->put("waiting_review_{$chatId}", true, 1800); // 30 –º–∏–Ω—É—Ç
        
        $keyboard = [
            [
                ['text' => '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
            ]
        ];
        
        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    private function showNotificationSettings($company, $chatId, $messageId)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $notificationsEnabled = cache()->get("notifications_{$chatId}", false);
        
        $message = "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n";
        $message .= "–ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n";
        $message .= "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏\n";
        $message .= "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∑–∞ —á–∞—Å –¥–æ –ø—Ä–∏–µ–º–∞\n";
        $message .= "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n\n";
        $message .= "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: " . ($notificationsEnabled ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã");
        
        $keyboard = [
            [
                ['text' => $notificationsEnabled ? 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å' : 'üîî –í–∫–ª—é—á–∏—Ç—å', 
                 'callback_data' => 'toggle_notifications']
            ],
            [
                ['text' => '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
            ]
        ];
        
        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    private function toggleNotifications($company, $chatId, $messageId)
    {
        $notificationsEnabled = cache()->get("notifications_{$chatId}", false);
        $newStatus = !$notificationsEnabled;
        
        cache()->put("notifications_{$chatId}", $newStatus, 86400 * 365); // 1 –≥–æ–¥
        
        $message = "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n";
        $message .= "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " . ($newStatus ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã") . "\n\n";
        
        if ($newStatus) {
            $message .= "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å—è—Ö –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.";
        } else {
            $message .= "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.";
        }
        
        $keyboard = [
            [
                ['text' => $newStatus ? 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å' : 'üîî –í–∫–ª—é—á–∏—Ç—å', 
                 'callback_data' => 'toggle_notifications']
            ],
            [
                ['text' => '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
            ]
        ];
        
        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç–∑—ã–≤–∞
     */
    private function handleReviewInput($company, $chatId, $text)
    {
        cache()->forget("waiting_review_{$chatId}");
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
        
        $message = "‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n\n";
        $message .= "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.";
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        $mainKeyboard = $this->botService->createMainKeyboard();
        
        $this->botService->sendMessage($company, $chatId, $message, [
            'reply_markup' => json_encode($mainKeyboard)
        ]);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤–ª–∞–¥–µ–ª—å—Ü—É
        if ($company->telegram_notifications_enabled && $company->telegram_chat_id) {
            $ownerMessage = "‚≠ê –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç!\n\n";
            $ownerMessage .= "üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {$chatId}\n";
            $ownerMessage .= "üí¨ –û—Ç–∑—ã–≤: {$text}";

            $this->botService->sendMessage($company, $company->telegram_chat_id, $ownerMessage);
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏
     */
    private function showRescheduleOptions($company, $chatId, $messageId, $appointmentId)
    {
        $appointment = $company->appointments()->find($appointmentId);
        
        if (!$appointment || $appointment->status === 'cancelled') {
            $this->botService->editMessage($company, $chatId, $messageId, 
                "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
            return;
        }

        $message = "üîÑ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏:\n\n";
        $message .= "üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {$appointment->formatted_date}\n";
        $message .= "üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {$appointment->formatted_time}\n";
        $message .= "üíº –£—Å–ª—É–≥–∞: {$appointment->service->name}\n";
        $message .= "üë§ –ö–ª–∏–µ–Ω—Ç: {$appointment->client_name}\n\n";
        $message .= "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

        $keyboard = [
            [
                ['text' => 'üìÖ –í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É', 'callback_data' => "reschedule_date:{$appointmentId}"]
            ],
            [
                ['text' => '‚Üê –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å—è–º', 'callback_data' => 'my_appointments'],
                ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'back_to_main']
            ]
        ];

        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
     */
    private function showRescheduleDateSelection($company, $chatId, $messageId, $appointmentId)
    {
        $appointment = $company->appointments()->find($appointmentId);
        
        if (!$appointment) {
            $this->botService->editMessage($company, $chatId, $messageId, 
                "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        $message = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:";
        $keyboard = $this->createRescheduleDateKeyboard($company, $appointmentId);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        $keyboard[] = [
            ['text' => '‚Üê –ù–∞–∑–∞–¥', 'callback_data' => "reschedule_appointment:{$appointmentId}"]
        ];

        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ (–∏—Å–∫–ª—é—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏)
     */
    private function createRescheduleDateKeyboard($company, $appointmentId)
    {
        $appointment = $company->appointments()->find($appointmentId);
        $currentDate = $appointment->appointment_date->format('Y-m-d');
        
        $settings = $company->getCalendarSettings();
        $daysAhead = $settings['appointment_days_ahead'];
        
        $keyboard = [];
        $today = Carbon::now();
        $row = [];
        
        for ($i = 0; $i < $daysAhead; $i++) {
            $date = $today->copy()->addDays($i);
            $dateString = $date->format('Y-m-d');
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏
            if ($dateString === $currentDate) {
                continue;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è —Å —É—á–µ—Ç–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            if (!$company->isWorkDay($date)) {
                continue;
            }
            
            $formattedDate = $date->format('d.m');
            $dayName = $this->getDayName($date);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            $dateException = $company->dateExceptions()->forDate($date)->first();
            $indicator = '';
            if ($dateException) {
                $indicator = $dateException->isAllowException() ? ' ‚úÖ' : ' ‚ö†Ô∏è';
            }
            
            $row[] = [
                'text' => "{$formattedDate} ({$dayName}){$indicator}",
                'callback_data' => "reschedule_select_date:{$appointmentId}:{$dateString}"
            ];
            
            // –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            if (count($row) == 2) {
                $keyboard[] = $row;
                $row = [];
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (!empty($row)) {
            $keyboard[] = $row;
        }
        
        return $keyboard;
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –¥–∞—Ç—ã
     */
    private function showRescheduleTimeSlots($company, $chatId, $messageId, $appointmentId, $newDate)
    {
        $appointment = $company->appointments()->find($appointmentId);
        
        if (!$appointment) {
            $this->botService->editMessage($company, $chatId, $messageId, 
                "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        $slots = $this->botService->getAvailableTimeSlots($company, $newDate);
        
        if (empty($slots)) {
            $message = "‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É ({$newDate}) –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:";
            $keyboard = $this->createRescheduleDateKeyboard($company, $appointmentId);
            $keyboard[] = [
                ['text' => '‚Üê –ù–∞–∑–∞–¥', 'callback_data' => "reschedule_appointment:{$appointmentId}"]
            ];
        } else {
            $message = "üïê –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ {$newDate}:";
            $keyboard = $this->createRescheduleTimeKeyboard($appointmentId, $newDate, $slots);
            $keyboard[] = [
                ['text' => '‚Üê –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º', 'callback_data' => "reschedule_date:{$appointmentId}"]
            ];
        }

        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
     */
    private function createRescheduleTimeKeyboard($appointmentId, $date, $slots)
    {
        $keyboard = [];
        $row = [];
        
        foreach ($slots as $slot) {
            $row[] = [
                'text' => $slot['time'],
                'callback_data' => "reschedule_select_time:{$appointmentId}:{$date}:{$slot['time']}"
            ];
            
            // –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            if (count($row) == 3) {
                $keyboard[] = $row;
                $row = [];
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (!empty($row)) {
            $keyboard[] = $row;
        }
        
        return $keyboard;
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞
     */
    private function confirmReschedule($company, $chatId, $messageId, $appointmentId, $newDate, $newTime)
    {
        $appointment = $company->appointments()->find($appointmentId);
        
        if (!$appointment) {
            $this->botService->editMessage($company, $chatId, $messageId, 
                "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        $message = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏:\n\n";
        $message .= "üìã –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: #{$appointment->id}\n";
        $message .= "üíº –£—Å–ª—É–≥–∞: {$appointment->service->name}\n";
        $message .= "üë§ –ö–ª–∏–µ–Ω—Ç: {$appointment->client_name}\n\n";
        $message .= "üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–Ø:\n";
        $message .= "üìÖ –° –¥–∞—Ç—ã: {$appointment->formatted_date} ‚Üí " . Carbon::parse($newDate)->format('d.m.Y') . "\n";
        $message .= "üïê –°–æ –≤—Ä–µ–º–µ–Ω–∏: {$appointment->formatted_time} ‚Üí {$newTime}\n\n";
        $message .= "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–µ—Ä–µ–Ω–æ—Å?";

        $keyboard = [
            [
                ['text' => '‚úÖ –î–∞, –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏', 'callback_data' => "confirm_reschedule:{$appointmentId}:{$newDate}:{$newTime}"],
                ['text' => '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data' => "reschedule_appointment:{$appointmentId}"]
            ]
        ];

        $this->botService->editMessage($company, $chatId, $messageId, $message, [
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏
     */
    private function processReschedule($company, $chatId, $messageId, $appointmentId, $newDate, $newTime)
    {
        $appointment = $company->appointments()->find($appointmentId);
        
        if (!$appointment) {
            $this->botService->editMessage($company, $chatId, $messageId, 
                "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω–æ
            $availableSlots = $this->botService->getAvailableTimeSlots($company, $newDate);
            $timeAvailable = collect($availableSlots)->contains('time', $newTime);
            
            if (!$timeAvailable) {
                $this->botService->editMessage($company, $chatId, $messageId, 
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.");
                return;
            }

            $oldDate = $appointment->formatted_date;
            $oldTime = $appointment->formatted_time;

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            $appointment->update([
                'appointment_date' => $newDate,
                'appointment_time' => $newTime
            ]);

            $message = "üéâ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞!\n\n";
            $message .= "üìã –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: #{$appointment->id}\n";
            $message .= "üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞: {$appointment->fresh()->formatted_date}\n";
            $message .= "üïê –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {$appointment->fresh()->formatted_time}\n";
            $message .= "üíº –£—Å–ª—É–≥–∞: {$appointment->service->name}\n\n";
            $message .= "üìû –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.";

            $this->botService->editMessage($company, $chatId, $messageId, $message);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
            if ($company->telegram_notifications_enabled && $company->telegram_chat_id) {
                $ownerMessage = "üîÑ –ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç!\n\n";
                $ownerMessage .= "üë§ –ö–ª–∏–µ–Ω—Ç: {$appointment->client_name}\n";
                $ownerMessage .= "üìû –¢–µ–ª–µ—Ñ–æ–Ω: {$appointment->client_phone}\n";
                $ownerMessage .= "üíº –£—Å–ª—É–≥–∞: {$appointment->service->name}\n\n";
                $ownerMessage .= "üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–Ø:\n";
                $ownerMessage .= "üìÖ –° {$oldDate} –Ω–∞ {$appointment->fresh()->formatted_date}\n";
                $ownerMessage .= "üïê –° {$oldTime} –Ω–∞ {$appointment->fresh()->formatted_time}";

                $this->botService->sendMessage($company, $company->telegram_chat_id, $ownerMessage);
            }

        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Telegram', [
                'error' => $e->getMessage(),
                'appointment_id' => $appointmentId,
                'new_date' => $newDate,
                'new_time' => $newTime
            ]);

            $this->botService->editMessage($company, $chatId, $messageId, 
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.");
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)
     */
    private function getDayName($date)
    {
        $days = [
            'Monday' => '–ü–Ω',
            'Tuesday' => '–í—Ç',
            'Wednesday' => '–°—Ä',
            'Thursday' => '–ß—Ç',
            'Friday' => '–ü—Ç',
            'Saturday' => '–°–±',
            'Sunday' => '–í—Å'
        ];
        
        return $days[$date->format('l')] ?? $date->format('D');
    }
}
