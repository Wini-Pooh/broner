<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use App\Services\AdminTelegramService;

class AdminTelegramController extends Controller
{
    private $telegramService;

    public function __construct(AdminTelegramService $telegramService)
    {
        $this->telegramService = $telegramService;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Telegram –±–æ—Ç–∞
     */
    public function webhook(Request $request)
    {
        try {
            $data = $request->all();
            
            Log::info('–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Telegram:', $data);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
            if (isset($data['callback_query'])) {
                $callbackQuery = $data['callback_query'];
                $callbackData = $callbackQuery['data'];
                $messageId = $callbackQuery['message']['message_id'];
                $chatId = $callbackQuery['message']['chat']['id'];
                $callbackQueryId = $callbackQuery['id'];

                $this->telegramService->handleCallback($callbackData, $callbackQueryId, $chatId, $messageId);
                
                return response()->json(['ok' => true]);
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (isset($data['message'])) {
                $message = $data['message'];
                $chatId = $message['chat']['id'];
                $text = $message['text'] ?? '';

                // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
                if ($text === '/status') {
                    $this->sendStatusMessage($chatId);
                }

                // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
                if ($text === '/help' || $text === '/start') {
                    $this->sendHelpMessage($chatId);
                }
            }

            return response()->json(['ok' => true]);

        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: ' . $e->getMessage());
            return response()->json(['ok' => false, 'error' => $e->getMessage()]);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –±–æ—Ç–∞
     */
    private function sendStatusMessage($chatId)
    {
        $message = "ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏</b>\n\n";
        $message .= "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n";
        $message .= "üìù –§—É–Ω–∫—Ü–∏–∏:\n";
        $message .= "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö\n";
        $message .= "‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n";
        $message .= "‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫\n";
        $message .= "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π\n\n";
        $message .= "üïí –í—Ä–µ–º—è: " . now()->format('d.m.Y H:i:s');

        $this->sendMessage($chatId, $message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private function sendHelpMessage($chatId)
    {
        $message = "üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏</b>\n\n";
        $message .= "üîπ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö\n";
        $message .= "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n";
        $message .= "‚úÖ <b>–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π</b> - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
        $message .= "‚ùå <b>–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É</b> - –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É\n";
        $message .= "üëÅÔ∏è <b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</b> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n";
        $message .= "üìù <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n";
        $message .= "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n";
        $message .= "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n";
        $message .= "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞";

        $this->sendMessage($chatId, $message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private function sendMessage($chatId, $text)
    {
        $botToken = '8257321025:AAF-knlnQ-Crn04WGblFq9Lft8wby8sTTH8';
        
        Http::post("https://api.telegram.org/bot{$botToken}/sendMessage", [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML'
        ]);
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
     */
    public function test()
    {
        $result = $this->telegramService->testConnection();
        
        if ($result['success']) {
            return response()->json([
                'success' => true,
                'message' => '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ!',
                'bot_info' => $result['bot_info']
            ]);
        }

        return response()->json([
            'success' => false,
            'message' => '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: ' . $result['error']
        ], 400);
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞
     */
    public function setWebhook()
    {
        $botToken = '8257321025:AAF-knlnQ-Crn04WGblFq9Lft8wby8sTTH8';
        $webhookUrl = route('admin.telegram.webhook');
        
        try {
            $response = Http::post("https://api.telegram.org/bot{$botToken}/setWebhook", [
                'url' => $webhookUrl,
                'allowed_updates' => ['message', 'callback_query']
            ]);

            if ($response->successful()) {
                $data = $response->json();
                
                return response()->json([
                    'success' => true,
                    'message' => 'Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                    'webhook_url' => $webhookUrl,
                    'response' => $data
                ]);
            }

            return response()->json([
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook',
                'error' => $response->body()
            ], 400);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
     */
    public function getWebhookInfo()
    {
        $botToken = '8257321025:AAF-knlnQ-Crn04WGblFq9Lft8wby8sTTH8';
        
        try {
            $response = Http::get("https://api.telegram.org/bot{$botToken}/getWebhookInfo");
            
            if ($response->successful()) {
                return response()->json([
                    'success' => true,
                    'webhook_info' => $response->json()['result']
                ]);
            }

            return response()->json([
                'success' => false,
                'error' => $response->body()
            ], 400);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'error' => $e->getMessage()
            ], 500);
        }
    }
}
