<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use App\Models\Company;
use App\Models\Appointment;
use Carbon\Carbon;

class TelegramBotService
{
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç
     */
    public function sendMessage($company, $chatId, $message, $options = [])
    {
        if (!$company->telegram_bot_token) {
            return false;
        }

        $url = "https://api.telegram.org/bot{$company->telegram_bot_token}/sendMessage";
        
        $data = array_merge([
            'chat_id' => $chatId,
            'text' => $message,
            'parse_mode' => 'HTML'
        ], $options);

        try {
            $response = Http::post($url, $data);
            
            if ($response->successful()) {
                return $response->json();
            } else {
                Log::error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è', [
                    'response' => $response->body(),
                    'data' => $data
                ]);
                return false;
            }
        } catch (\Exception $e) {
            Log::error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è', [
                'error' => $e->getMessage(),
                'data' => $data
            ]);
            return false;
        }
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public function editMessage($company, $chatId, $messageId, $message, $options = [])
    {
        if (!$company->telegram_bot_token) {
            return false;
        }

        $url = "https://api.telegram.org/bot{$company->telegram_bot_token}/editMessageText";
        
        $data = array_merge([
            'chat_id' => $chatId,
            'message_id' => $messageId,
            'text' => $message,
            'parse_mode' => 'HTML'
        ], $options);

        try {
            $response = Http::post($url, $data);
            return $response->successful() ? $response->json() : false;
        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram —Å–æ–æ–±—â–µ–Ω–∏—è', [
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }

    /**
     * –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query
     */
    public function answerCallbackQuery($company, $callbackQueryId, $text = null)
    {
        if (!$company->telegram_bot_token) {
            return false;
        }

        $url = "https://api.telegram.org/bot{$company->telegram_bot_token}/answerCallbackQuery";
        
        $data = ['callback_query_id' => $callbackQueryId];
        if ($text) {
            $data['text'] = $text;
        }

        try {
            Http::post($url, $data);
            return true;
        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query', [
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
     */
    public function createDateKeyboard($company, $daysAhead = null)
    {
        $settings = $company->getCalendarSettings();
        $daysAhead = $daysAhead ?? $settings['appointment_days_ahead'];
        
        $keyboard = [];
        $today = Carbon::now();
        $row = [];
        
        for ($i = 0; $i < $daysAhead; $i++) {
            $date = $today->copy()->addDays($i);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è —Å —É—á–µ—Ç–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            if (!$company->isWorkDay($date)) {
                continue;
            }
            
            $dateString = $date->format('Y-m-d');
            $formattedDate = $date->format('d.m');
            $dayName = $this->getDayName($date);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            $dateException = $company->dateExceptions()->forDate($date)->first();
            $indicator = '';
            if ($dateException) {
                $indicator = $dateException->isAllowException() ? ' ‚úÖ' : ' ‚ö†Ô∏è';
            }
            
            $row[] = [
                'text' => "{$formattedDate} ({$dayName}){$indicator}",
                'callback_data' => "select_date:{$dateString}"
            ];
            
            // –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            if (count($row) == 2) {
                $keyboard[] = $row;
                $row = [];
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (!empty($row)) {
            $keyboard[] = $row;
        }
        
        return $keyboard;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
     */
    public function createTimeKeyboard($date, $slots)
    {
        $keyboard = [];
        $row = [];
        
        foreach ($slots as $slot) {
            $row[] = [
                'text' => $slot['time'],
                'callback_data' => "select_time:{$date}:{$slot['time']}"
            ];
            
            // –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            if (count($row) == 3) {
                $keyboard[] = $row;
                $row = [];
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (!empty($row)) {
            $keyboard[] = $row;
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        $keyboard[] = [
            ['text' => '‚Üê –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É', 'callback_data' => 'select_date_back']
        ];
        
        return $keyboard;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
     */
    public function createServiceKeyboard($date, $time, $services)
    {
        $keyboard = [];
        
        foreach ($services as $service) {
            $text = $service->name;
            if ($service->price > 0) {
                $text .= " - {$service->formatted_price}";
            }
            
            $keyboard[] = [
                [
                    'text' => $text,
                    'callback_data' => "select_service:{$date}:{$time}:{$service->id}"
                ]
            ];
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        $keyboard[] = [
            ['text' => '‚Üê –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è', 'callback_data' => "select_date:{$date}"]
        ];
        
        return $keyboard;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    public function createMainKeyboard()
    {
        $keyboard = [
            [
                ['text' => 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è'],
                ['text' => 'üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏']
            ],
            [
                ['text' => 'üíº –£—Å–ª—É–≥–∏'],
                ['text' => 'üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã']
            ],
            [
                ['text' => 'üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã'],
                ['text' => '‚ùì –ü–æ–º–æ—â—å']
            ]
        ];

        return [
            'keyboard' => $keyboard,
            'resize_keyboard' => true,
            'one_time_keyboard' => false,
            'persistent' => true
        ];
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏
     */
    public function createBookingKeyboard()
    {
        $keyboard = [
            [
                ['text' => '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'],
                ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
            ]
        ];

        return [
            'keyboard' => $keyboard,
            'resize_keyboard' => true,
            'one_time_keyboard' => false
        ];
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
     */
    public function removeKeyboard()
    {
        return [
            'remove_keyboard' => true
        ];
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –¥–∞—Ç—ã —Å –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
     */
    public function getAvailableTimeSlots($company, $date)
    {
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        $appointments = $company->getAppointmentsForDate($date);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã —Å –ø–æ–º–æ—â—å—é —Ç–æ–π –∂–µ –ª–æ–≥–∏–∫–∏, —á—Ç–æ –∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        $slots = $this->generateTimeSlots($appointments, $date, false, $company);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –±–æ—Ç–∞
        $availableSlots = collect($slots)->filter(function($slot) {
            return $slot['available'] && !$slot['isPast'];
        })->map(function($slot) {
            return [
                'time' => $slot['time'],
                'available_slots' => $slot['max_appointments'] - $slot['appointment_count']
            ];
        })->values()->toArray();
        
        Log::info('Telegram –±–æ—Ç: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–æ—Ç—ã', [
            'date' => $date,
            'company_id' => $company->id,
            'total_slots' => count($slots),
            'available_slots' => count($availableSlots)
        ]);
        
        return $availableSlots;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —Å –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ CompanyController)
     */
    private function generateTimeSlots($appointments, $date, $isOwner = false, $company = null)
    {
        $slots = [];
        
        if (!$company) {
            return $slots;
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏
        $settings = $company->getCalendarSettings();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
        $dateException = $company->dateExceptions()->forDate($date)->first();
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        $activeServices = $company->services()->where('is_active', true)->get();
        
        // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏
        $minServiceDuration = $activeServices->min('duration_minutes') ?? 30;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å —É—á–µ—Ç–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        $workTimeRange = null;
        if ($dateException && $dateException->isAllowException()) {
            $workTimeRange = $dateException->getWorkTimeRange();
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        $startTime = Carbon::parse($workTimeRange ? $workTimeRange['start'] : $settings['work_start_time']);
        $endTime = Carbon::parse($workTimeRange ? $workTimeRange['end'] : $settings['work_end_time']);
        $slotDuration = $settings['appointment_interval'];
        $appointmentBreakTime = $settings['appointment_break_time'] ?? 0;
        $workDays = $settings['work_days'];
        $maxAppointmentsPerSlot = $settings['max_appointments_per_slot'] ?? 1;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Carbon –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
        $now = Carbon::now();
        $selectedDate = Carbon::parse($date);
        $isToday = $selectedDate->isSameDay($now);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å —É—á–µ—Ç–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        $dayOfWeek = strtolower($selectedDate->format('l'));
        $isWorkDay = in_array($dayOfWeek, $workDays);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∞–∑–¥–Ω–∏–∫ –ª–∏ —ç—Ç–æ
        $isHoliday = $this->isHoliday($selectedDate, $settings['holidays']);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        $finalIsWorkDay = $isWorkDay;
        if ($dateException) {
            if ($dateException->isAllowException()) {
                $finalIsWorkDay = true;
            } elseif ($dateException->isBlockException()) {
                $finalIsWorkDay = false;
            }
        }

        // –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —Ä–∞–±–æ—á–∏–π –∏–ª–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        if (!$isOwner && (!$finalIsWorkDay || $isHoliday)) {
            return [];
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º
        if (!$isOwner) {
            $maxDate = $now->copy()->addDays($settings['appointment_days_ahead']);
            if ($selectedDate->greaterThan($maxDate)) {
                return [];
            }
        }

        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–Ω—è—Ç—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ—Ä—ã–≤–∞ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
        $occupiedIntervals = [];
        foreach ($appointments as $appointment) {
            if ($appointment->status === 'cancelled') {
                continue;
            }
            
            $appointmentTime = Carbon::parse($appointment->appointment_time);
            $duration = $appointment->duration_minutes ?? $slotDuration;
            $appointmentEnd = $appointmentTime->copy()->addMinutes($duration);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –∫–æ–Ω—Ü—É
            if ($appointmentBreakTime > 0) {
                $intervalEnd = $appointmentEnd->copy()->addMinutes($appointmentBreakTime);
            } else {
                $intervalEnd = $appointmentEnd;
            }
            
            $occupiedIntervals[] = [
                'start' => $appointmentTime,
                'end' => $intervalEnd,
                'appointment' => $appointment,
                'duration' => $duration
            ];
        }

        $currentTime = $startTime->copy();
        
        while ($currentTime->lessThan($endTime)) {
            $timeString = $currentTime->format('H:i');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—Ä–µ–º—è –ª–∏ –ø–µ—Ä–µ—Ä—ã–≤–∞
            if ($this->isBreakTime($timeString, $settings['break_times'])) {
                $currentTime->addMinutes($slotDuration);
                continue;
            }
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            $slotDateTime = Carbon::parse($date . ' ' . $timeString);
            $isPast = $slotDateTime->lessThan($now);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç —Å –∑–∞–Ω—è—Ç—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
            $isBlocked = false;
            $blockingAppointment = null;
            
            foreach ($occupiedIntervals as $interval) {
                if ($currentTime->between($interval['start'], $interval['end'], false)) {
                    $isBlocked = true;
                    $blockingAppointment = $interval['appointment'];
                    break;
                }
            }
            
            // –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
            $slotAppointments = $appointments->filter(function($apt) use ($timeString) {
                if ($apt->status === 'cancelled') {
                    return false;
                }
                
                $aptTime = Carbon::parse($apt->appointment_time)->format('H:i');
                return $aptTime === $timeString;
            });
            
            $shouldIncludeSlot = false;
            
            if ($isOwner) {
                $shouldIncludeSlot = !$isBlocked || $slotAppointments->count() > 0;
            } else {
                $shouldIncludeSlot = !$isBlocked;
            }
            
            if ($shouldIncludeSlot) {
                $appointmentCount = $slotAppointments->count();
                $isFullyBooked = $appointmentCount >= $maxAppointmentsPerSlot;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–∞–º–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —É—Å–ª—É–≥–∏ + –ø–µ—Ä–µ—Ä—ã–≤
                $hasEnoughTime = $this->hasEnoughTimeForService($currentTime, $endTime, $minServiceDuration, $appointmentBreakTime, $occupiedIntervals);
                
                $slot = [
                    'time' => $timeString,
                    'appointments' => [],
                    'available' => $isOwner ? (!$isFullyBooked && !$isBlocked) : (!$isFullyBooked && !$isPast && $finalIsWorkDay && !$isHoliday && $hasEnoughTime && !$isBlocked),
                    'isPast' => $isPast,
                    'isOwner' => $isOwner,
                    'isWorkDay' => $finalIsWorkDay,
                    'isHoliday' => $isHoliday,
                    'isBlocked' => $isBlocked,
                    'appointment_count' => $appointmentCount,
                    'max_appointments' => $maxAppointmentsPerSlot,
                    'multiple_bookings_enabled' => $maxAppointmentsPerSlot > 1,
                    'has_enough_time' => $hasEnoughTime,
                    'required_time' => $minServiceDuration + $appointmentBreakTime,
                    'exception_info' => $dateException ? [
                        'type' => $dateException->exception_type,
                        'reason' => $dateException->reason,
                        'work_start_time' => $dateException->work_start_time,
                        'work_end_time' => $dateException->work_end_time,
                    ] : null
                ];

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å—è—Ö –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
                if ($isOwner && $slotAppointments->count() > 0) {
                    $slot['appointments'] = $slotAppointments->map(function($appointment) {
                        return [
                            'id' => $appointment->id,
                            'title' => $appointment->service->name ?? '–£—Å–ª—É–≥–∞',
                            'client_name' => $appointment->client_name,
                            'client_phone' => $appointment->client_phone,
                            'client_email' => $appointment->client_email,
                            'status' => $appointment->status,
                            'duration' => $appointment->service->duration_minutes ?? 30,
                            'price' => $appointment->service->price ?? 0
                        ];
                    })->values()->toArray();
                }

                $slots[] = $slot;
            }
            
            $currentTime->addMinutes($slotDuration);
        }

        return $slots;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º
     */
    private function isHoliday($date, $holidays)
    {
        $dateString = $date->format('Y-m-d');
        return in_array($dateString, $holidays);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è –≤ –ø–µ—Ä–µ—Ä—ã–≤
     */
    private function isBreakTime($time, $breakTimes)
    {
        $timeCarbon = Carbon::createFromFormat('H:i', $time);
        
        foreach ($breakTimes as $breakTime) {
            $breakStart = Carbon::createFromFormat('H:i', $breakTime['start']);
            $breakEnd = Carbon::createFromFormat('H:i', $breakTime['end']);
            
            if ($timeCarbon->between($breakStart, $breakEnd, false)) {
                return true;
            }
        }
        
        return false;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–ª–æ—Ç–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª—É–≥–∏
     */
    private function hasEnoughTimeForService($slotTime, $workEndTime, $serviceDuration, $breakTime, $occupiedIntervals)
    {
        // –í—Ä–µ–º—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —É—Å–ª—É–≥–∏ + –ø–µ—Ä–µ—Ä—ã–≤
        $requiredTime = $serviceDuration + $breakTime;
        
        // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Å–ª—É–≥–∏ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ—Ä—ã–≤–∞
        $serviceEndTime = $slotTime->copy()->addMinutes($requiredTime);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –∑–∞ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
        if ($serviceEndTime->greaterThan($workEndTime)) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –∑–∞–Ω—è—Ç—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        foreach ($occupiedIntervals as $interval) {
            // –ï—Å–ª–∏ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
            if ($slotTime->lessThan($interval['end']) && $serviceEndTime->greaterThan($interval['start'])) {
                return false;
            }
        }
        
        return true;
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞
     */
    public function setWebhook($company, $webhookUrl)
    {
        if (!$company->telegram_bot_token) {
            Log::error('–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –±–µ–∑ —Ç–æ–∫–µ–Ω–∞', [
                'company_id' => $company->id
            ]);
            return false;
        }

        $url = "https://api.telegram.org/bot{$company->telegram_bot_token}/setWebhook";
        
        Log::info('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook', [
            'company_id' => $company->id,
            'webhook_url' => $webhookUrl,
            'api_url' => $url
        ]);
        
        try {
            $response = Http::post($url, [
                'url' => $webhookUrl,
                'allowed_updates' => ['message', 'callback_query']
            ]);
            
            $result = $response->json();
            
            Log::info('–û—Ç–≤–µ—Ç –æ—Ç Telegram API –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook', [
                'company_id' => $company->id,
                'status' => $response->status(),
                'successful' => $response->successful(),
                'response' => $result
            ]);
            
            return $response->successful() ? $result : false;
        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook', [
                'company_id' => $company->id,
                'error' => $e->getMessage(),
                'webhook_url' => $webhookUrl
            ]);
            return false;
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞
     */
    public function deleteWebhook($company)
    {
        if (!$company->telegram_bot_token) {
            return false;
        }

        $url = "https://api.telegram.org/bot{$company->telegram_bot_token}/deleteWebhook";
        
        try {
            $response = Http::post($url);
            return $response->successful() ? $response->json() : false;
        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook', [
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
     */
    public function getWebhookInfo($company)
    {
        if (!$company->telegram_bot_token) {
            return false;
        }

        $url = "https://api.telegram.org/bot{$company->telegram_bot_token}/getWebhookInfo";
        
        try {
            $response = Http::get($url);
            return $response->successful() ? $response->json() : false;
        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ webhook', [
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
     */
    private function getDayName($date)
    {
        $days = [
            'Monday' => '–ü–Ω',
            'Tuesday' => '–í—Ç', 
            'Wednesday' => '–°—Ä',
            'Thursday' => '–ß—Ç',
            'Friday' => '–ü—Ç',
            'Saturday' => '–°–±',
            'Sunday' => '–í—Å'
        ];
        
        return $days[$date->format('l')] ?? '';
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
     */
    public function sendNewAppointmentNotification(Appointment $appointment)
    {
        $company = $appointment->company;
        
        if (!$company->hasTelegramBot() || !$company->telegram_notifications_enabled) {
            return false;
        }

        $message = "üîî <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!</b>\n\n";
        $message .= "üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {$appointment->client_name}\n";
        $message .= "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {$appointment->client_phone}\n";
        if ($appointment->client_email) {
            $message .= "üìß <b>Email:</b> {$appointment->client_email}\n";
        }
        $message .= "üìÖ <b>–î–∞—Ç–∞:</b> {$appointment->formatted_date}\n";
        $message .= "üïê <b>–í—Ä–µ–º—è:</b> {$appointment->formatted_time}\n";
        $message .= "üíº <b>–£—Å–ª—É–≥–∞:</b> {$appointment->service->name}\n";
        if ($appointment->notes) {
            $message .= "üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b> {$appointment->notes}\n";
        }
        $message .= "\nüìã <b>–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏:</b> #{$appointment->id}";

        return $this->sendMessage($company, $company->telegram_chat_id, $message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏
     */
    public function sendCancelledAppointmentNotification(Appointment $appointment)
    {
        $company = $appointment->company;
        
        if (!$company->hasTelegramBot() || !$company->telegram_notifications_enabled) {
            return false;
        }

        $message = "‚ùå <b>–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n";
        $message .= "üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {$appointment->client_name}\n";
        $message .= "üìÖ <b>–î–∞—Ç–∞:</b> {$appointment->formatted_date}\n";
        $message .= "üïê <b>–í—Ä–µ–º—è:</b> {$appointment->formatted_time}\n";
        $message .= "üíº <b>–£—Å–ª—É–≥–∞:</b> {$appointment->service->name}\n";
        $message .= "\nüìã <b>–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏:</b> #{$appointment->id}";

        return $this->sendMessage($company, $company->telegram_chat_id, $message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏
     */
    public function sendRescheduledAppointmentNotification(Appointment $appointment, $oldDate, $oldTime)
    {
        $company = $appointment->company;
        
        if (!$company->hasTelegramBot() || !$company->telegram_notifications_enabled) {
            return false;
        }

        $message = "üîÑ <b>–ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞</b>\n\n";
        $message .= "üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {$appointment->client_name}\n";
        $message .= "üìÖ <b>–°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞:</b> {$oldDate} –≤ {$oldTime}\n";
        $message .= "üìÖ <b>–ù–æ–≤–∞—è –¥–∞—Ç–∞:</b> {$appointment->formatted_date} –≤ {$appointment->formatted_time}\n";
        $message .= "üíº <b>–£—Å–ª—É–≥–∞:</b> {$appointment->service->name}\n";
        $message .= "\nüìã <b>–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏:</b> #{$appointment->id}";

        return $this->sendMessage($company, $company->telegram_chat_id, $message);
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
     */
    public function setCommands($company)
    {
        if (!$company->telegram_bot_token) {
            return false;
        }

        $url = "https://api.telegram.org/bot{$company->telegram_bot_token}/setMyCommands";
        
        $commands = [
            [
                'command' => 'start',
                'description' => '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            ],
            [
                'command' => 'book',
                'description' => '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º'
            ],
            [
                'command' => 'appointments',
                'description' => '–ú–æ–∏ –∑–∞–ø–∏—Å–∏'
            ],
            [
                'command' => 'services',
                'description' => '–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥'
            ],
            [
                'command' => 'schedule',
                'description' => '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'
            ],
            [
                'command' => 'contacts',
                'description' => '–ö–æ–Ω—Ç–∞–∫—Ç—ã'
            ],
            [
                'command' => 'help',
                'description' => '–°–ø—Ä–∞–≤–∫–∞'
            ],
            [
                'command' => 'cancel',
                'description' => '–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é'
            ]
        ];

        $data = [
            'commands' => json_encode($commands)
        ];

        try {
            $response = Http::post($url, $data);
            return $response->successful();
        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞', [
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }
}
